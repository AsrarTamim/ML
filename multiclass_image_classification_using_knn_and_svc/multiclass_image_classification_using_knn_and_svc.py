# -*- coding: utf-8 -*-
"""multiclass image classification using knn and svc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/188rYoPVu3GBcxKFa0Ba50NOwI81sL8fr
"""

import os

import numpy as np
import pandas as pd

import seaborn as sea

import tensorflow as tf
from tensorflow.keras.applications.mobilenet import MobileNet
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet import preprocess_input
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.regularizers import l2

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import OneHotEncoder
from sklearn.utils import shuffle
from sklearn import svm

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

sea.set_style("darkgrid")

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d alxmamaev/flowers-recognition

import zipfile
zip_ref = zipfile.ZipFile('/content/flowers-recognition.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

classes = ["daisy", "dandelion", "rose", "sunflower", "tulip"]
path = "/content/flowers"

file_path = [os.path.join(path, "daisy/100080576_f52e8ee070_n.jpg"),
             os.path.join(path, "dandelion/10043234166_e6dd915111_n.jpg"),
             os.path.join(path, "rose/10090824183_d02c613f10_m.jpg"),
             os.path.join(path, "sunflower/1008566138_6927679c8a.jpg"),
             os.path.join(path, "tulip/100930342_92e8746431_n.jpg")]

fig = plt.figure(figsize=(10, 12))
gs = gridspec.GridSpec(nrows=3, ncols=2, figure=fig)

for i in range(5):
    y, x = i//2, i%2
    ax = fig.add_subplot(gs[y,x])
    ax.imshow(image.load_img(file_path[i]))
    ax.axis("off")
    ax.title.set_text(classes[i])

# load pretrained MobileNet
model = MobileNet(input_shape=(224,224,3), include_top=True)

model.summary()

vector = model.get_layer("reshape_2").output
feature_extractor = tf.keras.Model(model.input, vector)

# create empty feature and label lists
X_list = []
Y_list = []

for f in range(5):
    folder_path = os.path.join(path, classes[f])
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)

        # check file extension, skip file if not jpg
        if not(file.endswith(".jpg")):
            continue

        # load image
        img = image.load_img(file_path, target_size=(224,224))
        # convert image to numpy array
        img_arr = image.img_to_array(img)
        # add 1 more dimension
        img_arr_b = np.expand_dims(img_arr, axis=0)
        # preprocess image
        input_img = preprocess_input(img_arr_b)
        # extract feature
        feature_vec = feature_extractor.predict(input_img)

        X_list.append(feature_vec.ravel())
        Y_list.append(f)

X = np.asarray(X_list, dtype=np.float32)
Y = np.asarray(Y_list, dtype=np.float32)

for s in range(100):
    X, Y = shuffle(X, Y)

print("Shape of feature matrix X")
print(X.shape)
print("\nShape of label matrix Y")
print(Y.shape)

class_types, counts = np.unique(Y, return_counts=True)

print("\nClass labels")
print(class_types)
print("\nClass counts")
print(counts)

train_X, test_X, train_Y, test_Y = train_test_split(X, Y, test_size=0.1,
                                                    stratify=Y,
                                                    random_state=0)

print("Shape of train_X")
print(train_X.shape)
print("\nShape of test_X")
print(test_X.shape)

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

# Initialize and train the k-Nearest Neighbors classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(train_X, train_Y)

# Make predictions on the test set
y_pred = knn.predict(test_X)

# Calculate accuracy
# accuracy1 = accuracy_score(train_X, train_Y)
accuracy = accuracy_score(test_Y, y_pred)
print("Accuracy:", accuracy)

# Print classification report
print(classification_report(test_Y, y_pred, target_names=classes))

from sklearn.svm import SVC
svc = SVC(gamma='auto',probability=True)
svc=svc.fit(train_X, train_Y)

print ("Traning Accuracy: ", svc.score(train_X, train_Y)*100) # Check training accuracy
print ("Testing Accuracy: ", svc.score(test_X,test_Y)*100) # Check testing accuracy

svc_pred = svc.predict(test_X)
accuracy_score(svc_pred,test_Y)*100

print(classification_report(test_Y,svc_pred))

print('The accuracy is: ' , 100.0 * accuracy_score(test_Y,svc_pred))